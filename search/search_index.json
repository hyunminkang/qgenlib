{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to qgenlib documentation","text":"<p>This is the documentation for the qgenlib project. </p>"},{"location":"#what-is-qgenlib","title":"What is qgenlib?","text":"<p>qgenlib provides a set of classes and functions for setting up basic C++ programming environment for Hyun Min Kang. These libraries are designed with quantitative genetics in mind, but does not provide any sophisticated implementations of quantitative genetics algorithms. It is designed to be used with the htslib library. Specifically, it provides the following functionalities:</p> <ul> <li>A macro-based command line parsing library implemented by Gon\u00e7alo Abecasis and used in many tools.</li> <li>A collection of helper functions to output error, warning, or other messages.</li> <li>A collection of helper functions to handle HTS file formats supported by htslib.</li> <li>Classes and libraries to aid basic data wrangling using tab-limited files.</li> <li>Other utility functions to handle strings.</li> <li>A simple class to handle phred-scale quality scores.</li> <li>A simple class to handle genomic intervals.</li> </ul>"},{"location":"#documentation-overview","title":"Documentation Overview","text":"<p>This documentation provides the following information:</p> <ul> <li>Quickstart: A quick guide to get started with qgenlib.</li> <li>Install: How to install qgenlib.</li> <li>Examples: A simple example to demonstrate how to use qgenlib.</li> </ul>"},{"location":"examples/","title":"Example Usage of qgenlib","text":""},{"location":"examples/#coding-with-qgenlib","title":"Coding with qgenlib","text":"<p><code>qgenlib</code> provides C++ libraries for following functionalities.</p> <ul> <li>Command Line Arguments A macro-based command line parsing library implemented by Gon\u00e7alo Abecasis and used in many tools.</li> <li>I/O Functions A collection of helper functions to output messages, and handle basic formats supported by htslib.</li> <li>TSV Functions Classes and libraries to aid basic data wrangling using tab-limited files.</li> <li>Genomics Simple classes to handle simple genomic data types.</li> <li>Miscellaneous Other utility functions to handle strings.</li> </ul> <p>Note that these examples contain only a subset of functions that <code>qgenlib</code> provides. A complete list of API reference may be available later. </p>"},{"location":"examples/#building-a-c-program-using-qgenlib","title":"Building a C++ program using qgenlib","text":"<p>A recommended way to build a new C++ program is to place your new program in parallel to the <code>qgenlib</code> and <code>htslib</code> directories. The following is an example of the directory structure.</p> <pre><code>/path/to/install\n|-- htslib\n|   `-- libhts.a\n|-- qgenlib\n|   `-- lib\n|       `-- libqgen.a\n`-- your_new_program\n</code></pre> <p>An example program that can be tested this way can be found at qbcf</p>"},{"location":"install/","title":"Installing qgenlib","text":""},{"location":"install/#directory-structure","title":"Directory structure","text":"<p>Before installing <code>qgenlib</code>, it is recommended to install htslib in the same directory you want to install <code>qgenlib' (i.e.</code>qgenlib<code>and</code>htslib` should be siblings directories). </p> <p>To visualize the directory structure of the installation, it should look like this: </p> <pre><code>/path/to/install\n|-- htslib\n|   `-- libhts.a\n|-- qgenlib\n</code></pre>"},{"location":"install/#installing-qgenlib_1","title":"Installing qgenlib","text":"<p>After installing <code>htslib</code>, you can clone the current snapshot of this repository to install as follows</p> <pre><code>## clone the current snapshot of this repository\n$ git clone https://github.com/hyunminkang/qgenlib.git\n\n## move to the qgenlib directory\n$ cd qgenlib\n\n## create a build directory\n$ mkdir build\n\n## move to the build directory\n$ cd build\n\n## run cmake to configure the build\n$ cmake ..\n</code></pre> <p>If <code>cmake</code> is not found, you need to install cmake in your system.</p>"},{"location":"install/#optional-customized-specification-of-the-library-path","title":"(Optional) Customized specification of the library path","text":"<p>In case any required libraries is missing, you may specify customized installing path by replacing \"cmake ..\" with the following options:</p> <pre><code>## If htslib is missing or installed in a different directory\n$ cmake -DHTS_INCLUDE_DIRS=/htslib_absolute_path/include/  \\\n        -DHTS_LIBRARIES=/htslib_absolute_path/lib/libhts.a ..\n\n## If bzip2 is missing or installed in a different directory\n$ cmake -DBZIP2_INCLUDE_DIRS=/bzip2_absolute_path/include/ \\\n        -DBZIP2_LIBRARIES=/bzip2_absolute_path/lib/libbz2.a ..\n\n## If lzma is missing or installed in a different directory\n$ cmake -DLZMA_INCLUDE_DIRS=/lzma_absolute_path/include/ \\\n        -DLZMA_LIBRARIES=/lzma_absolute_path/lib/liblzma.a ..\n\n## You may combine the multiples options above if needed.\n## Other missing libraries can be handled in a similar way.\n</code></pre>"},{"location":"install/#building-the-library","title":"Building the library","text":"<p>Once <code>cmake</code> is run successfully without errors, you can build the library by typing:</p> <pre><code>## Current directory: /path/to/install/qgenlib/build\n$ make\n</code></pre> <p>To test whether build was successful, you can run the following command:</p> <pre><code>## Current directory: /path/to/install/qgenlib/build\n$ ../bin/testqgen --tsv ../test/dummy.dat\n</code></pre>"},{"location":"quickstart/","title":"Quickstart for qgenlib","text":""},{"location":"quickstart/#installing-qgenlib","title":"Installing qgenlib","text":"<p>Before installing <code>qgenlib</code>, you need to install htslib in the same directory you want to install <code>qgenlib</code> (i.e. <code>qgenlib</code> and <code>htslib</code> should be siblings directories). You also need cmake installed in your system.</p> <p>After installing <code>htslib</code>, you can clone the current snapshot of this repository to install as well</p> <pre><code>$ git clone https://github.com/hyunminkang/qgenlib.git\n$ cd qgenlib\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n\n## test the example binary to check if the build was successful\n$ ../bin/testqgen --tsv ../test/dummy.dat\n</code></pre> <p>If you encounter any difficulties, see Install for more details.</p>"},{"location":"quickstart/#writing-a-c-program-using-qgenlib","title":"Writing a C++ program using <code>qgenlib</code>","text":"<p>The test program accompanied by this library contains a minimal example of how to use <code>qgenlib</code> to make your own C++ program. </p> <p>A more sophisticated examples can be found in the following example tools:</p> <ul> <li>qbcf: A collection of utilities to handle BCF/VCF files</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"examples/io/","title":"I/O Functions","text":""},{"location":"examples/io/#introduction","title":"Introduction","text":"<p><code>qgenlib</code> provides functions for basic input/output functions to handle messages to print out during the program execution.</p>"},{"location":"examples/io/#error-warning-and-notification-messages","title":"Error, Warning, and Notification Messages","text":"<p>Users can output <code>printf</code>-style functions, with variable number of arguments, to output error, warning, and notification messages. This function acts like <code>fprintf</code> in the sense that the message is printed to the standard error output, with the following differences:</p> <ul> <li><code>notice()</code> function automatically prints the timestamp before each message.</li> <li><code>warning()</code> function automatically prints the timestamp, give a beep sound, and prints and the word \"WARNING\" before each message.</li> <li><code>error()</code> function prints out the error message and terminate the program.</li> </ul> <p>Below are examples of how to use these functions:</p> <pre><code>// int n : number of lines processed\nnotice(\"Processed %d lines of input lines\\n\", n);\n// Example output: \n// NOTICE [2024/02/29 14:21:09] - Processed 1000 lines of input lines\n\n// int n : current line number\nwarning(\"Line %d is not properly formatted\\n\", n);\n// Example output: (with beep)\n// WARNING [2024/02/29 14:21:09] - Line 1234 is not properly formatted\n\n// int n : current line number\nerror(\"Cannot parse line %d\\n\", n);\n// Example output: (exits the program)\n// FATAL ERROR - \n// Cannot parse line 1234\n</code></pre> <p>Some of these examples can also be found in the qbcf repository in the <code>qbcf test-qgenlib</code> tool.</p>"},{"location":"examples/io/#other-printf-style-functions","title":"Other <code>printf</code>-style Functions","text":"<p><code>qgenlib</code> also provides other printf-style functions to handle messages. </p> <ul> <li><code>catprintf()</code> function appends printf-style string to the current string.</li> <li><code>hprintf()</code> function write messages to <code>htsFile*</code> object.</li> </ul> <pre><code>// append a string to a std::string object in print-style\nstd::string str(\"Hello\");\nint num = 1234;\nstd::string name(\"Customer\");\n// str will contains \"Hello, Customer No. 1234\" after running the following line\ncatprintf(str, \", %s No. %d\", name.c_str(), num); \n\n// write a message to a htsFile* object in printf-style\nhtsFile* fp = hts_open(\"output.txt\", \"w\");\nhprintf(fp, \"Hello, %s No. %d\", name.c_str(), num); \nhts_close(fp);\n</code></pre>"},{"location":"examples/misc/","title":"Miscellaneous Functions","text":""},{"location":"examples/misc/#introduction","title":"Introduction","text":"<p>There are many other classes and functions <code>qgenlib</code> provides, and  they are not fully documented yet. More documentations and API references will be provided in the future.</p>"},{"location":"examples/params/","title":"Command Line Arguments using qgenlib","text":""},{"location":"examples/params/#introduction","title":"Introduction","text":"<p><code>qgenlib</code> provides a macro-based command line parsing library.  This library was first implemented by Gon\u00e7alo Abecasis and used in many tools developed by Center for Statistical Genetics at the  University of Michigan. </p> <p>The key features of the command line parsing library is that the user can define the command line options using a simple macro and the library will automatically generate the help message and parse the command line arguments.</p>"},{"location":"examples/params/#example-usage","title":"Example Usage","text":"<p>The following is a simple example to demonstrate how to use the command line parsing library.</p> <pre><code>#include &lt;vector&gt;\n#include \"qgenlib/params.h\"\nint main(int argc, char** argv) {\n    // define the variables to store the command line arguments\n    std::string str1;\n    std::vector&lt;std::string&gt; str2;\n    int int3 = 0;\n    double double4 = 0.0;\n    bool bool5 = false;\n\n    // the macro definition starts with defining a paramList object.\n    paramList pl;\n    BEGIN_LONG_PARAMS(longParameters)\n        LONG_PARAM_GROUP(\"Options for string arguments\", NULL)\n        LONG_STRING_PARAM(\"str1\", &amp;str1, \"A dummy string argument\")\n        LONG_MULTI_STRING_PARAM(\"str2\", &amp;str2, \"Another dummy string argument (can be specified multiple times)\")\n\n        LONG_PARAM_GROUP(\"Options for non-string arguments\", NULL)\n        LONG_INT_PARAM(\"int3\", &amp;int3, \"A dummy integer argument\")    \n        LONG_DOUBLE_PARAM(\"double4\", &amp;double4, \"A dummy double argument\")\n        LONG_PARAM(\"bool5\",&amp;bool5,\"A dummy boolean argument\")\n    END_LONG_PARAMS();\n\n    // \n    pl.Add(new longParams(\"Available Options\", longParameters));\n    pl.Read(argc, argv);\n    pl.Status();\n\n    printf(\"str1: %s\\n\", str1.c_str());\n    printf(\"str2: \");\n    for (int i = 0; i &lt; str2.size(); i++) {\n        printf(\"%s \", str2[i].c_str());\n    }\n    printf(\"\\n\");\n    printf(\"int3: %d\\n\", int3);\n    printf(\"double4: %f\\n\", double4);\n    printf(\"bool5: %s\\n\", bool5 ? \"true\" : \"false\");\n\n    return 0;\n}\n</code></pre> <p>This example can also be found in the qbcf repository in the <code>qbcf test-qgenlib</code> tool. </p>"},{"location":"examples/params/#expected-output","title":"Expected Output","text":"<p>Output of an example run with some parameter settings are shown as follows:</p> <pre><code>qbcf test-qgenlib --str1 10 --str2 abc --str2 def --int3 12345 --bool5\n[qbcf test-qgenlib] -- Test basic functionalities in qgenlib\n\n Copyright (c) 2009-2022 by Hyun Min Kang and Adrian Tan\n Licensed under the Apache License v2.0 http://www.apache.org/licenses/\n\nAvailable Options\n\nThe following parameters are available. Ones with \"[]\" are in effect:\n       Options for string arguments : --str1 [10], --str2 [abc, def]\n   Options for non-string arguments : --int3 [12345], --double4 [0.00],\n                                      --bool5 [ON]\n\nRun with --help for more detailed help messages of each argument.\n\nstr1: 10\nstr2: abc def \nint3: 12345\ndouble4: 0.000000\nbool5: true\n</code></pre> <p>Printing out the help message can be done with <code>--help</code> option as follows:</p> <pre><code>qbcf test-qgenlib --help                                              \n[qbcf test-qgenlib] -- Test basic functionalities in qgenlib\n\n Copyright (c) 2009-2022 by Hyun Min Kang and Adrian Tan\n Licensed under the Apache License v2.0 http://www.apache.org/licenses/\n\nDetailed instructions of parameters are available. Ones with \"[]\" are in effect:\n\nAvailable Options:\n\n== Options for string arguments ==\n   --str1    [STR: ]             : A dummy string argument\n   --str2    [V_STR: ]           : Another dummy string argument (can be specified multiple times)\n\n== Options for non-string arguments ==\n   --int3    [INT: 0]            : A dummy integer argument\n   --double4 [FLT: 0.00]         : A dummy double argument\n   --bool5   [FLG: OFF]          : A dummy boolean argument\n\n\nNOTES:\nWhen --help was included in the argument. The program prints the help message but do not actually run\n</code></pre>"},{"location":"examples/tsv/","title":"Handling TSV Files","text":""},{"location":"examples/tsv/#introduction","title":"Introduction","text":"<p><code>qgenlib</code> provides functions for reading tab-limited files to handle tidy data types easily through <code>tsv_reader</code> and <code>dataframe_t</code> classes.</p>"},{"location":"examples/tsv/#streamlined-reading-of-tab-limited-files","title":"Streamlined reading of tab-limited files","text":"<p>The <code>tsv_reader</code> class offers a streamlined reading of tab-delimited file, in plaintext format or gzip- or bgzip-compressed formats. For bgzipped-compressed files, it also offers the ability to read from a specific region of the file through <code>tabix</code> index files.</p> <p>Below are examples of using <code>tsv_reader</code>:</p> <pre><code>// streamline reading of tab-delimited files\n// this example read the second column of the file and sum up the values\ntsv_reader tr1(\"input.tsv.gz\");\ndouble sum = 0.0;\nwhile( tr1.read_line() ) {\n    sum += tr1.get_double_at(1); // sum up the values in the second column\n}\nprintf(\"Sum of the second column: %lf\\n\", sum);\n\n// read a specific region of a bgzipped-compressed file\ntsv_reader tr2(\"input.tsv.gz\");\ntr2.jump_to(\"chr1:1000000-2000000\"); // read a specific region of the file\nsum = 0.0;\nwhile( tr2.read_line() ) {\n    sum += tr2.get_double_at(1); // sum up the values in the second column\n}\nprintf(\"Sum of the second column: %lf\\n\", sum);\n</code></pre> <p>The class <code>tsv_reader</code> would be particularly useful when writing a big tsv file that may not fit into the memory.</p>"},{"location":"examples/tsv/#loading-a-tab-limited-files-into-a-dataframe_t-object","title":"Loading a tab-limited files into a <code>dataframe_t</code> object","text":"<p><code>dataframe_t</code> class is intended to handle  tab-limited files as a dataframe, which is a collection of columns. It reads the entire file into memory and provides a convenient way to access the data, so it is recommended to use it only for small files.</p> <p>Below are examples of using <code>dataframe_t</code>:</p> <pre><code>// Read a tsv file into a dataframe_t object\ndataframe_t df(\"input.tsv.gz\");\nif ( df.has_column(\"value\") ) { // check if the column 'value' exists\n    int idx = df.get_colidx(\"value\");\n    double sum = 0.0;\n    for(int i = 0; i &lt; df.nrows; i++) {\n        sum += df.get_double_elem(i, idx);\n    }\n    // print the sum of the value column\n    printf(\"Sum of the value column: %lf\\n\", sum);\n}\nelse { // if the column 'value' does not exist, print an error message\n    error(\"The column 'value' does not exist in the file\");\n}\n</code></pre>"}]}